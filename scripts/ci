#!/usr/bin/env bash
declare -p GITHUB_REPOSITORY GITHUB_SHA

action="$1"; shift
case "$action" in
    worker-checkout)
        vars=( GITHUB_REPOSITORY GITHUB_SHA IDEFIX_COMPILER )
        function remote-command() {
            local local_checkout="$PWD/.github-runner/$IDEFIX_COMPILER/$GITHUB_SHA"
            if [ ! -e "$local_checkout" ]; then
                (
                    mkdir -p "$local_checkout"
                    cd "$local_checkout"
                    git init
                    git remote add origin "https://github.com/$GITHUB_REPOSITORY"
                    git fetch origin "$GITHUB_SHA"
                    git reset --hard "$GITHUB_SHA"
                    git submodule update --quiet --init --depth=1
                )
            fi
            cd "$local_checkout"
            export IDEFIX_DIR="$PWD"
            setup-env
        }
        ;;
    run-tests)
        vars=( GITHUB_SHA IDEFIX_COMPILER  )
        function remote-command() {
            local local_checkout="$PWD/.github-runner/$IDEFIX_COMPILER/$GITHUB_SHA"
            cd "$local_checkout"
            export IDEFIX_DIR="$PWD"
            export PYTHONPATH="$PWD"

            cd "$1"
            printf "Running command in %s : %s\n" "$PWD" "./testme.py ${*:2}"
            setup-env
            in-env ./testme.py "${@:2}"
        }
        ;;

    check-examples)
        vars=( GITHUB_SHA IDEFIX_COMPILER  )
        function remote-command() {
            local local_checkout="$PWD/.github-runner/$IDEFIX_COMPILER/$GITHUB_SHA"
            cd "$local_checkout"
            export IDEFIX_DIR="$PWD"
            export PYTHONPATH="$PWD"

            cd "test"
            printf "Running command in %s : %s\n" "$PWD" "./checks_examples.sh ${*:2}"
            setup-env
            in-env ./checks_examples.sh "${@:2}"
        }
        ;;

    *)
        vars=( )
        function remote-command() {
            :
        }
        ;;
esac

IDEFIX_CI_ARGUMENTS=( "$@" )

source "$HOME/env/$IDEFIX_COMPILER.sh"
ssh "$IDEFIX_COMPILER-worker" \
    bash -s <<EOF
$(declare -p "${vars[@]}")
$(declare -f remote-command export-env in-env setup-env)
$(declare -p IDEFIX_CI_ARGUMENTS)
$(export-env)
remote-command "\${IDEFIX_CI_ARGUMENTS[@]}"
EOF
